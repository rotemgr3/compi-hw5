@var_4 = constant [27 x i8] c"Printing number from 0 to \00"
@var_24 = constant [15 x i8] c"Printing done!\00"
@var_31 = constant [48 x i8] c"Byte test - testing addition and multiplication\00"
@.DIV_BY_ZERO_ERROR = internal constant [23 x i8] c"Error division by zero\00"
define void @check_division(i32) {
%valid = icmp eq i32 %0, 0
br i1 %valid, label %ILLEGAL, label %LEGAL
ILLEGAL:
call void @printzero(i8* getelementptr([23 x i8], [23 x i8]* @.DIV_BY_ZERO_ERROR, i32 0, i32 0))
call void @exit(i32 0)
ret void
LEGAL:
ret void
}
@.int_internal = internal constant [4 x i8] c"%d\0A\00"
@.DIVIDE_BY_ZERO.str = internal constant [23 x i8] c"Error division by zero\00"
declare i32 @printf(i8*, ...)
declare void @exit(i32)
@.int = constant [4 x i8] c"%d\0A\00"
@.str = constant [4 x i8] c"%s\0A\00"
@.zero_str = constant [3 x i8] c"%s\00"
define void @print(i8*){
call i32 (i8*, ...) @printf(i8* getelementptr([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* %0)
ret void
}
define void @printzero(i8*){
call i32 (i8*, ...) @printf(i8* getelementptr([3 x i8], [3 x i8]* @.zero_str, i32 0, i32 0), i8* %0)
ret void
}
define void @printi(i32){
%format_ptr = getelementptr [4 x i8], [4 x i8]* @.int_internal, i32 0, i32 0
call i32 (i8*, ...) @printf(i8* getelementptr([4 x i8], [4 x i8]* @.int_internal, i32 0, i32 0), i32 %0)
ret void
}
define void @printer(i32){
%var_2 = alloca i32, i32 50
%var_3 = getelementptr i32, i32* %var_2, i32 0
store i32 %0, i32* %var_3
%var_4.ptr = getelementptr [27 x i8], [27 x i8]* @var_4, i32 0, i32 0
call void @print(i8* %var_4.ptr)
%var_6 = getelementptr i32, i32* %var_2, i32 0
%var_7 = load i32, i32* %var_6
call void @printi(i32 %var_7)
br label %label_0
label_0:
%var_9 = getelementptr i32, i32* %var_2, i32 0
%var_10 = load i32, i32* %var_9
%var_11 = add i32 0, 0
%var_12 = icmp sge i32 %var_10, %var_11
br i1 %var_12, label %label_1, label %label_2
br label %label_1
label_1:
%var_13 = add i32 0, 0
%var_14 = getelementptr i32, i32* %var_2, i32 1
store i32 %var_13, i32* %var_14
br label @
%var_16 = getelementptr i32, i32* %var_2, i32 0
%var_17 = load i32, i32* %var_16
call void @printi(i32 %var_17)
%var_19 = getelementptr i32, i32* %var_2, i32 0
%var_20 = load i32, i32* %var_19
%var_21 = add i32 1, 0
%var_22 = sub i32 %var_20, %var_21
%var_23 = getelementptr i32, i32* %var_2, i32 0
store i32 %var_22, i32* %var_23
br label %label_0
br label %label_2
label_2:
%var_24.ptr = getelementptr [15 x i8], [15 x i8]* @var_24, i32 0, i32 0
call void @print(i8* %var_24.ptr)
ret void }
define void @main(){
%var_26 = alloca i32, i32 50
%var_27 = add i32 5, 0
call void @printer(i32 %var_27)
%var_29 = add i32 10, 0
call void @printer(i32 %var_29)
%var_31.ptr = getelementptr [48 x i8], [48 x i8]* @var_31, i32 0, i32 0
call void @print(i8* %var_31.ptr)
%var_33 = add i32 150, 0
%var_34 = add i32 150, 0
%var_35 = add i32 %var_33, %var_34
%var_36 = and i32 255, %var_35
%var_37 = getelementptr i32, i32* %var_26, i32 0
store i32 %var_36, i32* %var_37
%var_38 = getelementptr i32, i32* %var_26, i32 0
%var_39 = load i32, i32* %var_38
call void @printi(i32 %var_39)
%var_41 = add i32 130, 0
%var_42 = add i32 2, 0
%var_43 = mul i32 %var_41, %var_42
%var_44 = and i32 255, %var_43
%var_45 = getelementptr i32, i32* %var_26, i32 0
store i32 %var_44, i32* %var_45
%var_46 = getelementptr i32, i32* %var_26, i32 0
%var_47 = load i32, i32* %var_46
call void @printi(i32 %var_47)
ret void }
