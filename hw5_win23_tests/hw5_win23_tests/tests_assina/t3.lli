@var_3 = constant [25 x i8] c"This is the fourth test!\00"
@var_5 = constant [30 x i8] c"Here we test all calculations\00"
@var_7 = constant [28 x i8] c"now testing add - x = 1 + 2\00"
@var_13 = constant [16 x i8] c"The result is: \00"
@var_18 = constant [28 x i8] c"now testing mul - y = x * 4\00"
@var_25 = constant [16 x i8] c"The result is: \00"
@var_30 = constant [26 x i8] c"now testing add z = x + y\00"
@var_38 = constant [16 x i8] c"The result is: \00"
@var_43 = constant [24 x i8] c"now testing div y = x/z\00"
@var_51 = constant [16 x i8] c"The result is: \00"
@var_56 = constant [5 x i8] c"Bye!\00"
@.DIV_BY_ZERO_ERROR = internal constant [23 x i8] c"Error division by zero\00"
define void @check_division(i32) {
%valid = icmp eq i32 %0, 0
br i1 %valid, label %ILLEGAL, label %LEGAL
ILLEGAL:
call void @printzero(i8* getelementptr([23 x i8], [23 x i8]* @.DIV_BY_ZERO_ERROR, i32 0, i32 0))
call void @exit(i32 0)
ret void
LEGAL:
ret void
}
@.int_internal = internal constant [4 x i8] c"%d\0A\00"
@.DIVIDE_BY_ZERO.str = internal constant [23 x i8] c"Error division by zero\00"
declare i32 @printf(i8*, ...)
declare void @exit(i32)
@.int = constant [4 x i8] c"%d\0A\00"
@.str = constant [4 x i8] c"%s\0A\00"
@.zero_str = constant [3 x i8] c"%s\00"
define void @print(i8*){
call i32 (i8*, ...) @printf(i8* getelementptr([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* %0)
ret void
}
define void @printzero(i8*){
call i32 (i8*, ...) @printf(i8* getelementptr([3 x i8], [3 x i8]* @.zero_str, i32 0, i32 0), i8* %0)
ret void
}
define void @printi(i32){
%format_ptr = getelementptr [4 x i8], [4 x i8]* @.int_internal, i32 0, i32 0
call i32 (i8*, ...) @printf(i8* getelementptr([4 x i8], [4 x i8]* @.int_internal, i32 0, i32 0), i32 %0)
ret void
}
define void @main(){
%var_2 = alloca i32, i32 50
%var_3.ptr = getelementptr [25 x i8], [25 x i8]* @var_3, i32 0, i32 0
call void @print(i8* %var_3.ptr)
%var_5.ptr = getelementptr [30 x i8], [30 x i8]* @var_5, i32 0, i32 0
call void @print(i8* %var_5.ptr)
%var_7.ptr = getelementptr [28 x i8], [28 x i8]* @var_7, i32 0, i32 0
call void @print(i8* %var_7.ptr)
%var_9 = add i32 1, 0
%var_10 = add i32 2, 0
%var_11 = add i32 %var_9, %var_10
%var_12 = getelementptr i32, i32* %var_2, i32 0
store i32 %var_11, i32* %var_12
%var_13.ptr = getelementptr [16 x i8], [16 x i8]* @var_13, i32 0, i32 0
call void @print(i8* %var_13.ptr)
%var_15 = getelementptr i32, i32* %var_2, i32 0
%var_16 = load i32, i32* %var_15
call void @printi(i32 %var_16)
%var_18.ptr = getelementptr [28 x i8], [28 x i8]* @var_18, i32 0, i32 0
call void @print(i8* %var_18.ptr)
%var_20 = getelementptr i32, i32* %var_2, i32 0
%var_21 = load i32, i32* %var_20
%var_22 = add i32 4, 0
%var_23 = mul i32 %var_21, %var_22
%var_24 = getelementptr i32, i32* %var_2, i32 1
store i32 %var_23, i32* %var_24
%var_25.ptr = getelementptr [16 x i8], [16 x i8]* @var_25, i32 0, i32 0
call void @print(i8* %var_25.ptr)
%var_27 = getelementptr i32, i32* %var_2, i32 1
%var_28 = load i32, i32* %var_27
call void @printi(i32 %var_28)
%var_30.ptr = getelementptr [26 x i8], [26 x i8]* @var_30, i32 0, i32 0
call void @print(i8* %var_30.ptr)
%var_32 = getelementptr i32, i32* %var_2, i32 0
%var_33 = load i32, i32* %var_32
%var_34 = getelementptr i32, i32* %var_2, i32 1
%var_35 = load i32, i32* %var_34
%var_36 = add i32 %var_33, %var_35
%var_37 = getelementptr i32, i32* %var_2, i32 2
store i32 %var_36, i32* %var_37
%var_38.ptr = getelementptr [16 x i8], [16 x i8]* @var_38, i32 0, i32 0
call void @print(i8* %var_38.ptr)
%var_40 = getelementptr i32, i32* %var_2, i32 2
%var_41 = load i32, i32* %var_40
call void @printi(i32 %var_41)
%var_43.ptr = getelementptr [24 x i8], [24 x i8]* @var_43, i32 0, i32 0
call void @print(i8* %var_43.ptr)
%var_45 = getelementptr i32, i32* %var_2, i32 0
%var_46 = load i32, i32* %var_45
%var_47 = getelementptr i32, i32* %var_2, i32 2
%var_48 = load i32, i32* %var_47
call void @check_division(i32 %var_48)
%var_49 = sdiv i32 %var_46, %var_48
%var_50 = getelementptr i32, i32* %var_2, i32 1
store i32 %var_49, i32* %var_50
%var_51.ptr = getelementptr [16 x i8], [16 x i8]* @var_51, i32 0, i32 0
call void @print(i8* %var_51.ptr)
%var_53 = getelementptr i32, i32* %var_2, i32 1
%var_54 = load i32, i32* %var_53
call void @printi(i32 %var_54)
%var_56.ptr = getelementptr [5 x i8], [5 x i8]* @var_56, i32 0, i32 0
call void @print(i8* %var_56.ptr)
ret void }
