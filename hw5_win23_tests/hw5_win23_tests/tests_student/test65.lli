@.DIV_BY_ZERO_ERROR = internal constant [23 x i8] c"Error division by zero\00"
define void @check_division(i32) {
%valid = icmp eq i32 %0, 0
br i1 %valid, label %ILLEGAL, label %LEGAL
ILLEGAL:
call void @printzero(i8* getelementptr([23 x i8], [23 x i8]* @.DIV_BY_ZERO_ERROR, i32 0, i32 0))
call void @exit(i32 0)
ret void
LEGAL:
ret void
}
@.int_internal = internal constant [4 x i8] c"%d\0A\00"
@.DIVIDE_BY_ZERO.str = internal constant [23 x i8] c"Error division by zero\00"
declare i32 @printf(i8*, ...)
declare void @exit(i32)
@.int = constant [4 x i8] c"%d\0A\00"
@.str = constant [4 x i8] c"%s\0A\00"
@.zero_str = constant [3 x i8] c"%s\00"
define void @print(i8*){
call i32 (i8*, ...) @printf(i8* getelementptr([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* %0)
ret void
}
define void @printzero(i8*){
call i32 (i8*, ...) @printf(i8* getelementptr([3 x i8], [3 x i8]* @.zero_str, i32 0, i32 0), i8* %0)
ret void
}
define void @printi(i32){
%format_ptr = getelementptr [4 x i8], [4 x i8]* @.int_internal, i32 0, i32 0
call i32 (i8*, ...) @printf(i8* getelementptr([4 x i8], [4 x i8]* @.int_internal, i32 0, i32 0), i32 %0)
ret void
}
define void @maxTestsTestBracketArithmetic(){
%var_2 = alloca i32, i32 50
%var_3 = add i32 3, 0
%var_4 = add i32 5, 0
%var_5 = add i32 4, 0
%var_6 = add i32 %var_4, %var_5
%var_7 = mul i32 %var_3, %var_6
%var_8 = add i32 9, 0
%var_9 = add i32 1, 0
%var_10 = add i32 2, 0
%var_11 = add i32 %var_9, %var_10
call void @check_division(i32 %var_11)
%var_12 = sdiv i32 %var_8, %var_11
%var_13 = add i32 %var_7, %var_12
%var_14 = getelementptr i32, i32* %var_2, i32 0
store i32 %var_13, i32* %var_14
%var_15 = getelementptr i32, i32* %var_2, i32 0
%var_16 = load i32, i32* %var_15
call void @printi(i32 %var_16)
%var_18 = add i32 3, 0
%var_19 = add i32 5, 0
%var_20 = add i32 9, 0
%var_21 = sub i32 %var_19, %var_20
%var_22 = mul i32 %var_18, %var_21
%var_23 = add i32 5, 0
%var_24 = add i32 3, 0
%var_25 = sub i32 %var_23, %var_24
%var_26 = add i32 8, 0
%var_27 = mul i32 %var_25, %var_26
%var_28 = add i32 %var_22, %var_27
%var_29 = add i32 4, 0
%var_30 = add i32 4, 0
%var_31 = add i32 4, 0
call void @check_division(i32 %var_31)
%var_32 = sdiv i32 %var_30, %var_31
%var_33 = mul i32 %var_29, %var_32
%var_34 = sub i32 %var_28, %var_33
%var_35 = getelementptr i32, i32* %var_2, i32 0
store i32 %var_34, i32* %var_35
%var_36 = getelementptr i32, i32* %var_2, i32 0
%var_37 = load i32, i32* %var_36
call void @printi(i32 %var_37)
ret void }
define void @main(){
%var_39 = alloca i32, i32 50
call void @maxTestsTestBracketArithmetic()
ret void }
