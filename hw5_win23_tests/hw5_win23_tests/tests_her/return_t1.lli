@var_5 = constant [36 x i8] c"Finished the emptyReturn recursion.\00"
@var_26 = constant [38 x i8] c"Lets start with emptyReturn function:\00"
@var_31 = constant [43 x i8] c"And now we will finish with the intReturn:\00"
@.DIV_BY_ZERO_ERROR = internal constant [23 x i8] c"Error division by zero\00"
define void @check_division(i32) {
%valid = icmp eq i32 %0, 0
br i1 %valid, label %ILLEGAL, label %LEGAL
ILLEGAL:
call void @printzero(i8* getelementptr([23 x i8], [23 x i8]* @.DIV_BY_ZERO_ERROR, i32 0, i32 0))
call void @exit(i32 0)
ret void
LEGAL:
ret void
}
@.int_internal = internal constant [4 x i8] c"%d\0A\00"
@.DIVIDE_BY_ZERO.str = internal constant [23 x i8] c"Error division by zero\00"
declare i32 @printf(i8*, ...)
declare void @exit(i32)
@.int = constant [4 x i8] c"%d\0A\00"
@.str = constant [4 x i8] c"%s\0A\00"
@.zero_str = constant [3 x i8] c"%s\00"
define void @print(i8*){
call i32 (i8*, ...) @printf(i8* getelementptr([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* %0)
ret void
}
define void @printzero(i8*){
call i32 (i8*, ...) @printf(i8* getelementptr([3 x i8], [3 x i8]* @.zero_str, i32 0, i32 0), i8* %0)
ret void
}
define void @printi(i32){
%format_ptr = getelementptr [4 x i8], [4 x i8]* @.int_internal, i32 0, i32 0
call i32 (i8*, ...) @printf(i8* getelementptr([4 x i8], [4 x i8]* @.int_internal, i32 0, i32 0), i32 %0)
ret void
}
define void @emptyReturn(i32){
%var_2 = alloca i32, i32 50
%var_3 = add i32 0, 0
%var_4 = icmp eq i32 %0, %var_3
br i1 %var_4, label %label_0, label %label_1
br label %label_0
label_0:
%var_5.ptr = getelementptr [36 x i8], [36 x i8]* @var_5, i32 0, i32 0
call void @print(i8* %var_5.ptr)
ret void
br label %label_1
label_1:
call void @printi(i32 %0)
%var_8 = add i32 1, 0
%var_9 = sub i32 %0, %var_8
call void @emptyReturn(i32 %var_9)
ret void }
define i32 @intReturn(i32){
%var_11 = alloca i32, i32 50
%var_12 = add i32 0, 0
%var_13 = icmp eq i32 %0, %var_12
br i1 %var_13, label %label_2, label %label_3
br label %label_2
label_2:
ret i32 %0
br label %label_3
label_3:
%var_14 = add i32 1, 0
%var_15 = sub i32 %0, %var_14
%var_16 = call  i32 @intReturn(i32 %var_15)
%var_17 = add i32 %0, %var_16
%var_18 = getelementptr i32, i32* %var_11, i32 0
store i32 %var_17, i32* %var_18
%var_19 = getelementptr i32, i32* %var_11, i32 0
%var_20 = load i32, i32* %var_19
%var_21 = getelementptr i32, i32* %var_11, i32 0
%var_22 = load i32, i32* %var_21
ret i32 %var_22
ret i32 0 }
define void @main(){
%var_23 = alloca i32, i32 50
%var_24 = add i32 10, 0
%var_25 = getelementptr i32, i32* %var_23, i32 0
store i32 %var_24, i32* %var_25
%var_26.ptr = getelementptr [38 x i8], [38 x i8]* @var_26, i32 0, i32 0
call void @print(i8* %var_26.ptr)
%var_28 = getelementptr i32, i32* %var_23, i32 0
%var_29 = load i32, i32* %var_28
call void @emptyReturn(i32 %var_29)
%var_31.ptr = getelementptr [43 x i8], [43 x i8]* @var_31, i32 0, i32 0
call void @print(i8* %var_31.ptr)
%var_33 = getelementptr i32, i32* %var_23, i32 0
%var_34 = load i32, i32* %var_33
%var_35 = call  i32 @intReturn(i32 %var_34)
%var_36 = getelementptr i32, i32* %var_23, i32 1
store i32 %var_35, i32* %var_36
%var_37 = getelementptr i32, i32* %var_23, i32 1
%var_38 = load i32, i32* %var_37
call void @printi(i32 %var_38)
ret void }
