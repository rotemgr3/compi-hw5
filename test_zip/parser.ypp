%{
    #include <stdio.h>
    #include <iostream>
    #include "hw3_output.hpp"
    #include "types.h"
    #include "symbol_table.h"
    #include "gen_ir.h"
    #include "bp.hpp"

    using namespace output;
    extern int yylineno;
    extern int yylex();
    extern SymbolTableStack symbol_table_stack;
    extern GenIR gen_ir;
    extern CodeBuffer buffer;
    int yyerror(const char*);
%}

    %nonassoc VOID INT BYTE B BOOL OVERRIDE TRUE FALSE RETURN IF WHILE BREAK CONTINUE SC COMMA ID NUM STRING

    %right ASSIGN
    %left OR
    %left AND
    %left RELOP
    %left PLUS MINUS
    %left MULT DIV
    %right NOT
    %left LPAREN RPAREN LBRACE RBRACE
    %right ELSE

%%

Program: Funcs                                                                  {$$ = new Program();}
Funcs: /*epsilon*/                                                              {}                                            
Funcs: FuncDecl Funcs                                                           {}                                        
FuncDecl: OverRide RetType ID LPAREN Formals {$$ = new Funcdecl(dynamic_cast<Override*>($1), dynamic_cast<Rettype*>($2), $3, dynamic_cast<Formals*>($5));} RPAREN LBRACE Statements RBRACE Pop {gen_ir.gen_end_func(dynamic_cast<Rettype*>($2));}
OverRide: /*epsilon*/                                                           {$$ = new Override(false);}                                                      
OverRide: OVERRIDE                                                              {$$ = new Override(true);}
RetType: Type                                                                   {$$ = new Rettype(dynamic_cast<Type*>($1));}
RetType: VOID                                                                   {$$ = new Rettype();}                                                       
Formals: /*epsilon*/                                                            {$$ = new Formals();}
Formals: FormalsList                                                            {$$ = new Formals(dynamic_cast<Formalslist*>($1));}
FormalsList: FormalDecl                                                         {$$ = new Formalslist(dynamic_cast<Formaldecl*>($1));}
FormalsList: FormalDecl COMMA FormalsList                                       {$$ = new Formalslist(dynamic_cast<Formaldecl*>($1), dynamic_cast<Formalslist*>($3));}
FormalDecl: Type ID                                                             {$$ = new Formaldecl(dynamic_cast<Type*>($1), $2);}
Statements: Statement                                                           {$$ = new Statements(dynamic_cast<Statement*>($1));}
Statements: Statements Statement                                                {$$ = new Statements(dynamic_cast<Statements*>($1), dynamic_cast<Statement*>($2));}
Statement: LBRACE Push Statements RBRACE Pop                                    {$$ = new Statement(dynamic_cast<Statements*>($3));}
Statement: Type ID SC                                                           {$$ = new Statement(dynamic_cast<Type*>($1), $2);}
Statement: Type ID ASSIGN Exp SC                                                {$$ = new Statement(dynamic_cast<Type*>($1), $2, dynamic_cast<Exp*>($4));}
Statement: ID ASSIGN Exp SC                                                     {$$ = new Statement($1, dynamic_cast<Exp*>($3));}
Statement: Call SC                                                              {$$ = new Statement(dynamic_cast<Call*>($1));}
Statement: RETURN SC                                                            {$$ = new Statement($1);}
Statement: RETURN Exp SC                                                        {$$ = new Statement($1, dynamic_cast<Exp*>($2));}
Statement: IF LPAREN verify_bool RPAREN Push Label Statement   {$$ = new Statement(dynamic_cast<Statement*>($7), dynamic_cast<Exp*>($3), dynamic_cast<Label*>($6)); symbol_table_stack.pop_symbol_table();}
Statement: IF LPAREN verify_bool RPAREN Push Label Statement ELSE {gen_ir.gen_nextlist_label(dynamic_cast<Exp*>($3)); symbol_table_stack.pop_symbol_table();} Push Label Statement {$$ = new Statement(dynamic_cast<Statement*>($7), dynamic_cast<Statement*>($12), dynamic_cast<Exp*>($3), dynamic_cast<Label*>($6), dynamic_cast<Label*>($11)); symbol_table_stack.pop_symbol_table();}
Statement: WHILE LPAREN Label verify_bool RPAREN {symbol_table_stack.push_symbol_table(true);} Label Statement {$$ = new Statement(dynamic_cast<Exp*>($4), dynamic_cast<Label*>($3), dynamic_cast<Label*>($7), dynamic_cast<Statement*>($8)); symbol_table_stack.pop_symbol_table();}
Statement: BREAK SC                                                             {$$ = new Statement($1);}
Statement: CONTINUE SC                                                          {$$ = new Statement($1);}
Call: ID LPAREN ExpList RPAREN                                                  {$$ = new Call($1, dynamic_cast<Explist*>($3));}
Call: ID LPAREN RPAREN                                                          {$$ = new Call($1);}
ExpList: Exp                                                        {$$ = new Explist(gen_ir.gen_explist(dynamic_cast<Exp *>($1)));}
ExpList: Exp {$1 = gen_ir.gen_explist(dynamic_cast<Exp *>($1));} COMMA ExpList    {$$ = new Explist(dynamic_cast<Exp*>($1), dynamic_cast<Explist*>($4));}  // {$$ = $4;(dynamic_cast<Explist *>($$)->expressions).insert((dynamic_cast<Explist *>($$)->expressions).begin(), std::make_shared<Exp>(dynamic_cast<Exp*>($1)));}
Type: INT                                                                       {$$ = new Type($1);}
Type: BYTE                                                                      {$$ = new Type($1);}
Type: BOOL                                                                      {$$ = new Type($1);}
Exp: LPAREN Exp RPAREN                                                          {$$ = new Exp(dynamic_cast<Exp*>($2));}
Exp: Exp PLUS Exp                                                               {$$ = new Exp(dynamic_cast<Exp*>($1), $2, dynamic_cast<Exp*>($3));}
Exp: Exp MINUS Exp                                                              {$$ = new Exp(dynamic_cast<Exp*>($1), $2, dynamic_cast<Exp*>($3));}
Exp: Exp MULT Exp                                                               {$$ = new Exp(dynamic_cast<Exp*>($1), $2, dynamic_cast<Exp*>($3));}
Exp: Exp DIV Exp                                                                {$$ = new Exp(dynamic_cast<Exp*>($1), $2, dynamic_cast<Exp*>($3));}
Exp: ID                                                                         {$$ = new Exp($1);}
Exp: Call                                                                       {$$ = new Exp(dynamic_cast<Call*>($1));}
Exp: NUM                                                                        {$$ = new Exp($1);}
Exp: NUM B                                                                      {$$ = new Exp($1, $2);}
Exp: STRING                                                                     {$$ = new Exp($1);}
Exp: TRUE                                                                       {$$ = new Exp($1);}
Exp: FALSE                                                                      {$$ = new Exp($1);}
Exp: NOT Exp                                                                    {$$ = new Exp($1, dynamic_cast<Exp*>($2));}                                                      
Exp: Exp AND Label Exp                                                          {$$ = new Exp(dynamic_cast<Exp*>($1), $2, dynamic_cast<Exp*>($4), dynamic_cast<Label*>($3));}
Exp: Exp OR Label Exp                                                           {$$ = new Exp(dynamic_cast<Exp*>($1), $2, dynamic_cast<Exp*>($4), dynamic_cast<Label*>($3));}
Exp: Exp RELOP Exp                                                              {$$ = new Exp(dynamic_cast<Exp*>($1), $2, dynamic_cast<Exp*>($3));}
Exp: LPAREN Type RPAREN Exp                                                     {$$ = new Exp(dynamic_cast<Type*>($2), dynamic_cast<Exp*>($4));}

Push:                                                                           {symbol_table_stack.push_symbol_table();}                     
Pop:                                                                            {symbol_table_stack.pop_symbol_table();}                        
verify_bool: Exp                                                                {verify_bool($1);}
Label:                                                                          {$$ = new Label();}
%%

SymbolTableStack symbol_table_stack = SymbolTableStack();
GenIR gen_ir = GenIR();
CodeBuffer buffer = CodeBuffer();

int main(){
    gen_ir.gen_init();
    buffer.init();
    int res = yyparse();
    buffer.printGlobalBuffer();
    buffer.printCodeBuffer();
    return res;
}

int yyerror(const char *){
	errorSyn(yylineno);
	exit(0);
}