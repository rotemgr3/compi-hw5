@var_4 = constant [12 x i8] c"val is true\00"
@.division_zero_error_str = internal constant [23 x i8] c"Error division by zero\00"
define void @check_division(i32) {
%valid = icmp eq i32 %0, 0
br i1 %valid, label %ILLEGAL, label %LEGAL
ILLEGAL:
call void @print(i8* getelementptr([23 x i8], [23 x i8]* @.division_zero_error_str, i32 0, i32 0))
call void @exit(i32 0)
ret void
LEGAL:
ret void
}
declare i32 @printf(i8*, ...)
declare void @exit(i32)
@.int_specifier = constant [4 x i8] c"%d\0A\00"
@.str_specifier = constant [4 x i8] c"%s\0A\00"
define void @print(i8*){
call i32 (i8*, ...) @printf(i8* getelementptr([4 x i8], [4 x i8]* @.str_specifier, i32 0, i32 0), i8* %0)
ret void
}
define void @printi(i32){
%format_ptr = getelementptr [4 x i8], [4 x i8]* @.int_specifier, i32 0, i32 0
call i32 (i8*, ...) @printf(i8* getelementptr([4 x i8], [4 x i8]* @.int_specifier, i32 0, i32 0), i32 %0)
ret void
}
define void @printByValue_bool(i32){
%var_2 = alloca i32, i32 50
%var_3 = icmp eq i32 0, %0
br i1 %var_3, label %label_1, label %label_0
br label %label_0
label_0:
%var_4.ptr = getelementptr [12 x i8], [12 x i8]* @var_4, i32 0, i32 0
call void @print(i8* %var_4.ptr)
br label %label_2
br label %label_1
label_1:
%var_6 = add i32 42, 0
call void @printi(i32 %var_6)
br label %label_2
label_2:
ret void }
define void @main(){
%var_8 = alloca i32, i32 50
br label %label_3
br label %label_3
label_3:
br label %label_5
label_4:
br label %label_5
label_5:
%var_9 = phi i32 [ 1, %label_3], [0, %label_4]
call void @printByValue_bool(i32 %var_9)
br label %label_7
br label %label_6
label_6:
br label %label_8
label_7:
br label %label_8
label_8:
%var_11 = phi i32 [ 1, %label_6], [0, %label_7]
call void @printByValue_bool(i32 %var_11)
ret void }
