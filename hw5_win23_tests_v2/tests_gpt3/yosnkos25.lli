@.division_zero_error_str = internal constant [23 x i8] c"Error division by zero\00"
define void @check_division(i32) {
%valid = icmp eq i32 %0, 0
br i1 %valid, label %ILLEGAL, label %LEGAL
ILLEGAL:
call void @print(i8* getelementptr([23 x i8], [23 x i8]* @.division_zero_error_str, i32 0, i32 0))
call void @exit(i32 0)
ret void
LEGAL:
ret void
}
declare i32 @printf(i8*, ...)
declare void @exit(i32)
@.int_specifier = constant [4 x i8] c"%d\0A\00"
@.str_specifier = constant [4 x i8] c"%s\0A\00"
define void @print(i8*){
call i32 (i8*, ...) @printf(i8* getelementptr([4 x i8], [4 x i8]* @.str_specifier, i32 0, i32 0), i8* %0)
ret void
}
define void @printi(i32){
%format_ptr = getelementptr [4 x i8], [4 x i8]* @.int_specifier, i32 0, i32 0
call i32 (i8*, ...) @printf(i8* getelementptr([4 x i8], [4 x i8]* @.int_specifier, i32 0, i32 0), i32 %0)
ret void
}
define i32 @foo_int_byte(i32, i32){
%var_2 = alloca i32, i32 50
%var_3 = getelementptr i32, i32* %var_2, i32 0
store i32 %0, i32* %var_3
br label %label_0
label_0:
%var_4 = getelementptr i32, i32* %var_2, i32 0
%var_5 = load i32, i32* %var_4
%var_6 = add i32 0, 0
%var_7 = icmp sgt i32 %var_5, %var_6
br i1 %var_7, label %label_1, label %label_4
br label %label_1
label_1:
%var_8 = add i32 2, 0
%var_9 = mul i32 %var_8, %1
%var_10 = getelementptr i32, i32* %var_2, i32 0
%var_11 = load i32, i32* %var_10
%var_12 = icmp eq i32 %var_9, %var_11
br i1 %var_12, label %label_2, label %label_3
br label %label_2
label_2:
br label %label_4
br label %label_3
label_3:
%var_13 = getelementptr i32, i32* %var_2, i32 0
%var_14 = load i32, i32* %var_13
%var_15 = add i32 1, 0
%var_16 = sub i32 %var_14, %var_15
%var_17 = getelementptr i32, i32* %var_2, i32 0
store i32 %var_16, i32* %var_17
br label %label_0
br label %label_4
label_4:
%var_18 = getelementptr i32, i32* %var_2, i32 0
%var_19 = load i32, i32* %var_18
%var_20 = and i32 255, %var_19
ret i32 %var_20
ret i32 0 }
define void @main(){
%var_21 = alloca i32, i32 50
%var_22 = add i32 10, 0
%var_23 = add i32 3, 0
%var_24 = and i32 255, %var_23
%var_25 = call  i32 @foo_int_byte(i32 %var_22, i32 %var_24)
call void @printi(i32 %var_25)
%var_27 = add i32 10, 0
%var_28 = add i32 20, 0
%var_29 = and i32 255, %var_28
%var_30 = call  i32 @foo_int_byte(i32 %var_27, i32 %var_29)
call void @printi(i32 %var_30)
ret void }
