@var_10 = constant [11 x i8] c"I'm func 4\00"
@var_13 = constant [14 x i8] c"calling test1\00"
@var_20 = constant [21 x i8] c"calling inline test1\00"
@var_24 = constant [21 x i8] c"calling test2 with 1\00"
@var_32 = constant [25 x i8] c"calling test3 with var 2\00"
@var_39 = constant [14 x i8] c"calling test4\00"
@.division_zero_error_str = internal constant [23 x i8] c"Error division by zero\00"
define void @check_division(i32) {
%valid = icmp eq i32 %0, 0
br i1 %valid, label %ILLEGAL, label %LEGAL
ILLEGAL:
call void @print(i8* getelementptr([23 x i8], [23 x i8]* @.division_zero_error_str, i32 0, i32 0))
call void @exit(i32 0)
ret void
LEGAL:
ret void
}
declare i32 @printf(i8*, ...)
declare void @exit(i32)
@.int_specifier = constant [4 x i8] c"%d\0A\00"
@.str_specifier = constant [4 x i8] c"%s\0A\00"
define void @print(i8*){
call i32 (i8*, ...) @printf(i8* getelementptr([4 x i8], [4 x i8]* @.str_specifier, i32 0, i32 0), i8* %0)
ret void
}
define void @printi(i32){
%format_ptr = getelementptr [4 x i8], [4 x i8]* @.int_specifier, i32 0, i32 0
call i32 (i8*, ...) @printf(i8* getelementptr([4 x i8], [4 x i8]* @.int_specifier, i32 0, i32 0), i32 %0)
ret void
}
define i32 @test1(){
%var_2 = alloca i32, i32 50
%var_3 = add i32 22, 0
ret i32 22
ret i32 0 }
define i32 @test2_int(i32){
%var_4 = alloca i32, i32 50
%var_5 = add i32 22, 0
%var_6 = add i32 %var_5, %0
ret i32 %var_6
ret i32 0 }
define void @test3_int(i32){
%var_7 = alloca i32, i32 50
call void @printi(i32 %0)
ret void
ret void }
define void @test4(){
%var_9 = alloca i32, i32 50
%var_10.ptr = getelementptr [11 x i8], [11 x i8]* @var_10, i32 0, i32 0
call void @print(i8* %var_10.ptr)
ret void
ret void }
define void @main(){
%var_12 = alloca i32, i32 50
%var_13.ptr = getelementptr [14 x i8], [14 x i8]* @var_13, i32 0, i32 0
call void @print(i8* %var_13.ptr)
%var_15 = call  i32 @test1()
%var_16 = getelementptr i32, i32* %var_12, i32 0
store i32 %var_15, i32* %var_16
%var_17 = getelementptr i32, i32* %var_12, i32 0
%var_18 = load i32, i32* %var_17
call void @printi(i32 %var_18)
%var_20.ptr = getelementptr [21 x i8], [21 x i8]* @var_20, i32 0, i32 0
call void @print(i8* %var_20.ptr)
%var_22 = call  i32 @test1()
call void @printi(i32 %var_22)
%var_24.ptr = getelementptr [21 x i8], [21 x i8]* @var_24, i32 0, i32 0
call void @print(i8* %var_24.ptr)
%var_26 = add i32 1, 0
%var_27 = call  i32 @test2_int(i32 %var_26)
%var_28 = getelementptr i32, i32* %var_12, i32 0
store i32 %var_27, i32* %var_28
%var_29 = getelementptr i32, i32* %var_12, i32 0
%var_30 = load i32, i32* %var_29
call void @printi(i32 %var_30)
%var_32.ptr = getelementptr [25 x i8], [25 x i8]* @var_32, i32 0, i32 0
call void @print(i8* %var_32.ptr)
%var_34 = add i32 2, 0
%var_35 = getelementptr i32, i32* %var_12, i32 1
store i32 %var_34, i32* %var_35
%var_36 = getelementptr i32, i32* %var_12, i32 1
%var_37 = load i32, i32* %var_36
call void @test3_int(i32 %var_37)
%var_39.ptr = getelementptr [14 x i8], [14 x i8]* @var_39, i32 0, i32 0
call void @print(i8* %var_39.ptr)
call void @test4()
ret void
ret void }
