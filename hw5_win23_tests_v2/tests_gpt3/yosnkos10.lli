@.division_zero_error_str = internal constant [23 x i8] c"Error division by zero\00"
define void @check_division(i32) {
%valid = icmp eq i32 %0, 0
br i1 %valid, label %ILLEGAL, label %LEGAL
ILLEGAL:
call void @print(i8* getelementptr([23 x i8], [23 x i8]* @.division_zero_error_str, i32 0, i32 0))
call void @exit(i32 0)
ret void
LEGAL:
ret void
}
declare i32 @printf(i8*, ...)
declare void @exit(i32)
@.int_specifier = constant [4 x i8] c"%d\0A\00"
@.str_specifier = constant [4 x i8] c"%s\0A\00"
define void @print(i8*){
call i32 (i8*, ...) @printf(i8* getelementptr([4 x i8], [4 x i8]* @.str_specifier, i32 0, i32 0), i8* %0)
ret void
}
define void @printi(i32){
%format_ptr = getelementptr [4 x i8], [4 x i8]* @.int_specifier, i32 0, i32 0
call i32 (i8*, ...) @printf(i8* getelementptr([4 x i8], [4 x i8]* @.int_specifier, i32 0, i32 0), i32 %0)
ret void
}
define i32 @trutru(){
%var_2 = alloca i32, i32 50
%var_3 = add i32 9001, 0
call void @printi(i32 %var_3)
br label %label_29
br label %label_29
label_29:
br label %label_34
label_32:
br label %label_34
label_34:
%var_5 = phi i32 [ 1, %label_29], [0, %label_32]
ret i32 %var_5
ret i32 0 }
define void @main(){
%var_6 = alloca i32, i32 50
br label %label_1
br label %label_0
label_0:
%var_7 = call i32 @trutru()
%var_8 = icmp eq i32 0, %var_7
br i1 %var_8, label %label_2, label %label_1
br label %label_1
label_1:
%var_9 = add i32 9002, 0
call void @printi(i32 %var_9)
br label %label_2
label_2:
ret void }
