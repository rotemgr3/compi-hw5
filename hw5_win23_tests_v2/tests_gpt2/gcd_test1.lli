@.division_zero_error_str = internal constant [23 x i8] c"Error division by zero\00"
define void @check_division(i32) {
%valid = icmp eq i32 %0, 0
br i1 %valid, label %ILLEGAL, label %LEGAL
ILLEGAL:
call void @print(i8* getelementptr([23 x i8], [23 x i8]* @.division_zero_error_str, i32 0, i32 0))
call void @exit(i32 0)
ret void
LEGAL:
ret void
}
declare i32 @printf(i8*, ...)
declare void @exit(i32)
@.int_specifier = constant [4 x i8] c"%d\0A\00"
@.str_specifier = constant [4 x i8] c"%s\0A\00"
define void @print(i8*){
call i32 (i8*, ...) @printf(i8* getelementptr([4 x i8], [4 x i8]* @.str_specifier, i32 0, i32 0), i8* %0)
ret void
}
define void @printi(i32){
%format_ptr = getelementptr [4 x i8], [4 x i8]* @.int_specifier, i32 0, i32 0
call i32 (i8*, ...) @printf(i8* getelementptr([4 x i8], [4 x i8]* @.int_specifier, i32 0, i32 0), i32 %0)
ret void
}
define i32 @gcd_int_int(i32, i32){
%var_2 = alloca i32, i32 50
%var_3 = icmp slt i32 %0, %1
br i1 %var_3, label %label_0, label %label_1
br label %label_0
label_0:
%var_4 = call  i32 @gcd_int_int(i32 %1, i32 %0)
ret i32 %var_4
br label %label_1
label_1:
%var_5 = add i32 0, 0
%var_6 = icmp eq i32 %1, %var_5
br i1 %var_6, label %label_2, label %label_3
br label %label_2
label_2:
ret i32 %0
br label %label_3
label_3:
call void @check_division(i32 %1)
%var_7 = sdiv i32 %0, %1
%var_8 = getelementptr i32, i32* %var_2, i32 0
store i32 %var_7, i32* %var_8
%var_9 = getelementptr i32, i32* %var_2, i32 0
%var_10 = load i32, i32* %var_9
%var_11 = mul i32 %var_10, %1
%var_12 = sub i32 %0, %var_11
%var_13 = getelementptr i32, i32* %var_2, i32 1
store i32 %var_12, i32* %var_13
%var_14 = getelementptr i32, i32* %var_2, i32 1
%var_15 = load i32, i32* %var_14
%var_16 = call  i32 @gcd_int_int(i32 %1, i32 %var_15)
ret i32 %var_16
ret i32 0 }
define void @main(){
%var_17 = alloca i32, i32 50
%var_18 = add i32 121, 0
%var_19 = add i32 33, 0
%var_20 = call  i32 @gcd_int_int(i32 %var_18, i32 %var_19)
call void @printi(i32 %var_20)
ret void }
