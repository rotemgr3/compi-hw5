@.division_zero_error_str = internal constant [23 x i8] c"Error division by zero\00"
define void @check_division(i32) {
%valid = icmp eq i32 %0, 0
br i1 %valid, label %ILLEGAL, label %LEGAL
ILLEGAL:
call void @print(i8* getelementptr([23 x i8], [23 x i8]* @.division_zero_error_str, i32 0, i32 0))
call void @exit(i32 0)
ret void
LEGAL:
ret void
}
declare i32 @printf(i8*, ...)
declare void @exit(i32)
@.int_specifier = constant [4 x i8] c"%d\0A\00"
@.str_specifier = constant [4 x i8] c"%s\0A\00"
define void @print(i8*){
call i32 (i8*, ...) @printf(i8* getelementptr([4 x i8], [4 x i8]* @.str_specifier, i32 0, i32 0), i8* %0)
ret void
}
define void @printi(i32){
%format_ptr = getelementptr [4 x i8], [4 x i8]* @.int_specifier, i32 0, i32 0
call i32 (i8*, ...) @printf(i8* getelementptr([4 x i8], [4 x i8]* @.int_specifier, i32 0, i32 0), i32 %0)
ret void
}
define void @main(){
%var_2 = alloca i32, i32 50
%var_3 = add i32 5, 0
%var_4 = getelementptr i32, i32* %var_2, i32 0
store i32 %var_3, i32* %var_4
%var_5 = getelementptr i32, i32* %var_2, i32 0
%var_6 = load i32, i32* %var_5
%var_7 = getelementptr i32, i32* %var_2, i32 1
store i32 %var_6, i32* %var_7
%var_8 = getelementptr i32, i32* %var_2, i32 1
%var_9 = load i32, i32* %var_8
%var_10 = add i32 5, 0
%var_11 = add i32 %var_9, %var_10
%var_12 = getelementptr i32, i32* %var_2, i32 1
store i32 %var_11, i32* %var_12
%var_13 = getelementptr i32, i32* %var_2, i32 0
%var_14 = load i32, i32* %var_13
%var_15 = getelementptr i32, i32* %var_2, i32 2
store i32 %var_14, i32* %var_15
%var_16 = getelementptr i32, i32* %var_2, i32 1
%var_17 = load i32, i32* %var_16
%var_18 = getelementptr i32, i32* %var_2, i32 2
%var_19 = load i32, i32* %var_18
%var_20 = add i32 %var_17, %var_19
%var_21 = getelementptr i32, i32* %var_2, i32 0
store i32 %var_20, i32* %var_21
%var_22 = getelementptr i32, i32* %var_2, i32 0
%var_23 = load i32, i32* %var_22
call void @printi(i32 %var_23)
ret void }
