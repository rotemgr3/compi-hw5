@var_3 = constant [9 x i8] c"EPIC INT\00"
@var_9 = constant [10 x i8] c"EPIC BOOL\00"
@var_23 = constant [33 x i8] c"You should expect the following:\00"
@var_25 = constant [74 x i8] c"EPIC INT  |  EPIC BOOL  |  Just as expected  | EPIC INT 19 |  EPIC BOOL 1\00"
@var_39 = constant [17 x i8] c"Just as expected\00"
@var_54 = constant [17 x i8] c"Unexpected error\00"
@var_70 = constant [10 x i8] c"EPIC BYTE\00"
@.division_zero_error_str = internal constant [23 x i8] c"Error division by zero\00"
define void @check_division(i32) {
%valid = icmp eq i32 %0, 0
br i1 %valid, label %ILLEGAL, label %LEGAL
ILLEGAL:
call void @print(i8* getelementptr([23 x i8], [23 x i8]* @.division_zero_error_str, i32 0, i32 0))
call void @exit(i32 0)
ret void
LEGAL:
ret void
}
declare i32 @printf(i8*, ...)
declare void @exit(i32)
@.int_specifier = constant [4 x i8] c"%d\0A\00"
@.str_specifier = constant [4 x i8] c"%s\0A\00"
define void @print(i8*){
call i32 (i8*, ...) @printf(i8* getelementptr([4 x i8], [4 x i8]* @.str_specifier, i32 0, i32 0), i8* %0)
ret void
}
define void @printi(i32){
%format_ptr = getelementptr [4 x i8], [4 x i8]* @.int_specifier, i32 0, i32 0
call i32 (i8*, ...) @printf(i8* getelementptr([4 x i8], [4 x i8]* @.int_specifier, i32 0, i32 0), i32 %0)
ret void
}
define i32 @epicInt_int_int_int(i32, i32, i32){
%var_2 = alloca i32, i32 50
%var_3.ptr = getelementptr [9 x i8], [9 x i8]* @var_3, i32 0, i32 0
call void @print(i8* %var_3.ptr)
%var_5 = mul i32 %1, %2
%var_6 = add i32 %0, %var_5
%var_7 = add i32 %var_6, %0
ret i32 %var_7
ret i32 %0
ret i32 0 }
define i32 @epicBool_bool_bool_bool(i32, i32, i32){
%var_8 = alloca i32, i32 50
%var_9.ptr = getelementptr [10 x i8], [10 x i8]* @var_9, i32 0, i32 0
call void @print(i8* %var_9.ptr)
%var_11 = icmp eq i32 0, %0
br i1 %var_11, label %label_44, label %label_40
br label %label_40
label_40:
%var_12 = add i32 1, 0
ret i32 1
br label %label_44
label_44:
%var_13 = icmp eq i32 0, %1
br i1 %var_13, label %label_53, label %label_48
br label %label_48
label_48:
%var_14 = add i32 2, 0
ret i32 2
br label %label_63
br label %label_53
label_53:
%var_15 = icmp eq i32 0, %2
br i1 %var_15, label %label_61, label %label_57
br label %label_57
label_57:
%var_16 = add i32 3, 0
ret i32 3
br label %label_61
label_61:
br label %label_63
label_63:
%var_17 = icmp eq i32 0, %0
br i1 %var_17, label %label_67, label %label_71
br label %label_67
label_67:
%var_18 = icmp eq i32 0, %1
br i1 %var_18, label %label_77, label %label_71
br label %label_71
label_71:
%var_19 = add i32 0, 0
%var_20 = add i32 1, 0
%var_21 = sub i32 %var_19, %var_20
ret i32 %var_21
br label %label_77
label_77:
ret i32 0 }
define void @main(){
%var_22 = alloca i32, i32 50
%var_23.ptr = getelementptr [33 x i8], [33 x i8]* @var_23, i32 0, i32 0
call void @print(i8* %var_23.ptr)
%var_25.ptr = getelementptr [74 x i8], [74 x i8]* @var_25, i32 0, i32 0
call void @print(i8* %var_25.ptr)
%var_27 = add i32 6, 0
%var_28 = add i32 1, 0
%var_29 = add i32 7, 0
%var_30 = call  i32 @epicInt_int_int_int(i32 %var_27, i32 %var_28, i32 %var_29)
br label %label_0
br label %label_0
label_0:
br label %label_2
label_1:
br label %label_2
label_2:
%var_31 = phi i32 [ 1, %label_0], [0, %label_1]
br label %label_3
br label %label_3
label_3:
br label %label_5
label_4:
br label %label_5
label_5:
%var_32 = phi i32 [ 1, %label_3], [0, %label_4]
%var_33 = add i32 1, 0
%var_34 = add i32 2, 0
%var_35 = icmp sgt i32 %var_33, %var_34
br i1 %var_35, label %label_6, label %label_7
br label %label_6
label_6:
br label %label_8
label_7:
br label %label_8
label_8:
%var_36 = phi i32 [ 1, %label_6], [0, %label_7]
%var_37 = call  i32 @epicBool_bool_bool_bool(i32 %var_31, i32 %var_32, i32 %var_36)
%var_38 = icmp sgt i32 %var_30, %var_37
br i1 %var_38, label %label_120, label %label_159
br label %label_120
label_120:
%var_39.ptr = getelementptr [17 x i8], [17 x i8]* @var_39, i32 0, i32 0
call void @print(i8* %var_39.ptr)
%var_41 = add i32 6, 0
%var_42 = add i32 1, 0
%var_43 = add i32 7, 0
%var_44 = call  i32 @epicInt_int_int_int(i32 %var_41, i32 %var_42, i32 %var_43)
call void @printi(i32 %var_44)
br label %label_9
br label %label_9
label_9:
br label %label_11
label_10:
br label %label_11
label_11:
%var_46 = phi i32 [ 1, %label_9], [0, %label_10]
br label %label_12
br label %label_12
label_12:
br label %label_14
label_13:
br label %label_14
label_14:
%var_47 = phi i32 [ 1, %label_12], [0, %label_13]
%var_48 = add i32 1, 0
%var_49 = add i32 2, 0
%var_50 = icmp sgt i32 %var_48, %var_49
br i1 %var_50, label %label_15, label %label_16
br label %label_15
label_15:
br label %label_17
label_16:
br label %label_17
label_17:
%var_51 = phi i32 [ 1, %label_15], [0, %label_16]
%var_52 = call  i32 @epicBool_bool_bool_bool(i32 %var_46, i32 %var_47, i32 %var_51)
call void @printi(i32 %var_52)
br label %label_197
br label %label_159
label_159:
%var_54.ptr = getelementptr [17 x i8], [17 x i8]* @var_54, i32 0, i32 0
call void @print(i8* %var_54.ptr)
%var_56 = add i32 6, 0
%var_57 = add i32 1, 0
%var_58 = add i32 7, 0
%var_59 = call  i32 @epicInt_int_int_int(i32 %var_56, i32 %var_57, i32 %var_58)
call void @printi(i32 %var_59)
br label %label_18
br label %label_18
label_18:
br label %label_20
label_19:
br label %label_20
label_20:
%var_61 = phi i32 [ 1, %label_18], [0, %label_19]
br label %label_21
br label %label_21
label_21:
br label %label_23
label_22:
br label %label_23
label_23:
%var_62 = phi i32 [ 1, %label_21], [0, %label_22]
%var_63 = add i32 1, 0
%var_64 = add i32 2, 0
%var_65 = icmp sgt i32 %var_63, %var_64
br i1 %var_65, label %label_24, label %label_25
br label %label_24
label_24:
br label %label_26
label_25:
br label %label_26
label_26:
%var_66 = phi i32 [ 1, %label_24], [0, %label_25]
%var_67 = call  i32 @epicBool_bool_bool_bool(i32 %var_61, i32 %var_62, i32 %var_66)
call void @printi(i32 %var_67)
br label %label_197
label_197:
ret void }
define i32 @epicByte_byte_byte_byte(i32, i32, i32){
%var_69 = alloca i32, i32 50
%var_70.ptr = getelementptr [10 x i8], [10 x i8]* @var_70, i32 0, i32 0
call void @print(i8* %var_70.ptr)
%var_72 = mul i32 %1, %2
%var_73 = and i32 255, %var_72
%var_74 = add i32 %0, %var_73
%var_75 = and i32 255, %var_74
%var_76 = add i32 %var_75, %0
%var_77 = and i32 255, %var_76
ret i32 %var_77
ret i32 0 }
